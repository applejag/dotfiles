#!/usr/bin/env bash

set +e

# JS field injection code from https://github.com/qutebrowser/qutebrowser/blob/master/misc/userscripts/password_fill
javascript_escape() {
    # print the first argument in an escaped way, such that it can safely
    # be used within javascripts double quotes
    # shellcheck disable=SC2001
    sed "s,[\\\\'\"\/],\\\\&,g" <<< "$1"
}

js() {
cat <<EOF
    function isVisible(elem) {
        var style = elem.ownerDocument.defaultView.getComputedStyle(elem, null);
        if (style.getPropertyValue("visibility") !== "visible" ||
            style.getPropertyValue("display") === "none" ||
            style.getPropertyValue("opacity") === "0") {
            return false;
        }
        return elem.offsetWidth > 0 && elem.offsetHeight > 0;
    };
    function hasPasswordField(form) {
        var inputs = form.getElementsByTagName("input");
        for (var j = 0; j < inputs.length; j++) {
            var input = inputs[j];
            if (input.type == "password") {
                return true;
            }
        }
        return false;
    };
    function loadData2Form (form) {
        var inputs = form.getElementsByTagName("input");
        for (var j = 0; j < inputs.length; j++) {
            var input = inputs[j];
            if (isVisible(input) && (input.type == "text" || input.type == "email")) {
                input.focus();
                input.value = "$(javascript_escape "${USERNAME}")";
                input.dispatchEvent(new Event('change'));
                input.blur();
            }
            if (input.type == "password") {
                input.focus();
                input.value = "$(javascript_escape "${PASSWORD}")";
                input.dispatchEvent(new Event('change'));
                input.blur();
            }
        }
    };
    var forms = document.getElementsByTagName("form");
    if("$(javascript_escape "${QUTE_URL}")" == window.location.href) {
        for (i = 0; i < forms.length; i++) {
            if (hasPasswordField(forms[i])) {
                loadData2Form(forms[i]);
            }
        }
    } else {
        alert("Secrets will not be inserted.\nUrl of this page and the one where the user script was started differ.");
    }
EOF
}

URL=$(echo "$QUTE_URL" | awk -F/ '{print $3}' | sed 's/www.//g')
TOKEN_TMPDIR="${TMPDIR:-/tmp}"
TOKEN_CACHE="$TOKEN_TMPDIR/1pass.token"

dmenu-prompt() {
    local PROMPT="$1"

    #rofi -dmenu -i -p "$PROMPT"
    wofi --gtk-dark --dmenu --insensitive --prompt "$PROMPT"
}

dmenu-prompt-pass() {
    local PROMPT="$1"

    #rofi -dmenu -password -p "$PROMPT"
    wofi --gtk-dark --lines 1 --dmenu --password --prompt "$PROMPT"
}

clipboard-copy() {
    # xclip -in -selection clipboard
    wl-copy --trim-newline
}

op-signin() {
    #op signin --output=raw "$@"
    op signin --raw "$@"
}

op-list() {
    #op list items --cache --session="$TOKEN"
    op item list --cache --session="$TOKEN" --format=json
}

op-get() {
    #op get item --cache --session="$TOKEN" "$@"
    op item get --cache --session="$TOKEN" --format=json "$@"
}

op-totp() {
    #op get totp --cache --session="$TOKEN"
    op item get --cache --session="$TOKEN" --otp "$@"
}

echo "message-info 'Looking for password for $URL...'" >> "$QUTE_FIFO"

if [ -f "$TOKEN_CACHE" ]; then
    TOKEN="$(cat "$TOKEN_CACHE")"
    if ! op-signin --session="$TOKEN" > /dev/null; then
        TOKEN="$(dmenu-prompt-pass "1password: "| op-signin)" || TOKEN=""
        echo "$TOKEN" > "$TOKEN_CACHE"
    fi
else
    TOKEN=$(dmenu-prompt-pass "1password: "| op signin) || TOKEN=""
    install -m 600 /dev/null "$TOKEN_CACHE"
    echo "$TOKEN" > "$TOKEN_CACHE"
fi


if [[ -z "$TOKEN" ]]; then
    echo "message-error 'Wrong master password'" >> "$QUTE_FIFO"
    exit 0
fi

LIST_ITEM_OUT="$(op-list)"
if [[ $? != 0 ]]; then
    echo "message-error 'Failed to list items. See :process for more info'" >> "$QUTE_FIFO"
    exit 0
fi

UUID="$(echo "$LIST_ITEM_OUT" | jq --arg url "$URL" -r '[.[] | select((.urls//[])[].href | test("github.2rioffice.com")).id] | first // ""')" || UUID="" 

if [[ -z "$UUID" ]];then
    echo "message-error 'No entry found for $URL'" >> "$QUTE_FIFO"
    TITLE="$(echo "$LIST_ITEM_OUT" | jq -r '.[].title' | dmenu-prompt)" || TITLE=""
    if [ -n "$TITLE" ]; then
        UUID=$(echo "$LIST_ITEM_OUT" | jq --arg title "$TITLE" -r '[.[] | select(.title | test("github.2rioffice.com")).id] | first // ""') || UUID=""
    else
        UUID=""
    fi
fi

if [[ -z "$UUID" ]];then
    echo "message-error 'Entry not found for $UUID'" >> "$QUTE_FIFO"
    exit 0
fi

ITEM="$(op-get "$UUID")"

PASSWORD="$(echo "$ITEM" | jq -r '[.fields[] | select(.purpose=="PASSWORD") | .value] | first // ""')"

if [ -z "$PASSWORD" ]; then
    echo "message-error 'No password found for $URL'" >> "$QUTE_FIFO"
    exit 0
fi

TITLE="$(echo "$ITEM" | jq -r '.title')"
USERNAME="$(echo "$ITEM" | jq -r '[.fields[] | select(.purpose=="USERNAME") | .value] | first // ""')"

printjs() {
    js | sed 's,//.*$,,' | tr '\n' ' '
}
echo "jseval -q $(printjs)" >> "$QUTE_FIFO"

TOTP="$(echo "$ITEM" | op-totp "$UUID")" || TOTP=""
if [ -n "$TOTP" ]; then
    echo "$TOTP" | clipboard-copy
    echo "message-info 'Pasted one time password for $TITLE to clipboard'" >> "$QUTE_FIFO" 
fi
